name: build

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CC_TEST_REPORTER_ID: 116e680b22e379b7a9da04e84696bc363d3e145776a92884de4b6b6b2a253fe5
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up code coverage monitoring
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-0.6.3-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          builder: ${{ steps.buildx.outputs.name }}
          tags: cfranklin11/tipresias_frontend:latest
          load: true
      - name: Build browser_test Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./browser_test
          builder: ${{ steps.buildx.outputs.name }}
          tags: cfranklin11/tipresias_browser_test:latest
          load: true
      - name: Lint
        if: ${{ always() }}
        run: |
          docker run --rm cfranklin11/tipresias_frontend:latest yarn run eslint src
      - name: Check types
        if: ${{ always() }}
        run: |
          docker run --rm cfranklin11/tipresias_frontend:latest yarn run flow
      - name: Run unit tests
        if: ${{ always() }}
        run: |
          docker run --rm -e CI=true cfranklin11/tipresias_frontend:latest yarn run test:unit
      - name: Run integration/system tests
        if: ${{ always() }}
        env:
          DATA_SCIENCE_SERVICE: ${{ secrets.DATA_SCIENCE_SERVICE }}
          DATA_SCIENCE_SERVICE_TOKEN: ${{ secrets.DATA_SCIENCE_SERVICE_TOKEN }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        run: |
          docker-compose -f docker-compose.ci.yml up --no-start

          ./scripts/update_frontend_gql_types.sh docker-compose.ci.yml
          docker-compose -f docker-compose.ci.yml stop

          ./scripts/browser_tests.sh docker-compose.ci.yml
          docker-compose -f docker-compose.ci.yml stop
      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: cypress-screenshots
          path: ./browser_test/cypress/screenshots/
      - name: Upload test coverage report
        # Only way I could get it to work was running format-coverage from each app's root.
        # Otherwise, it can't find files listed in coverage reports, because it uses $PWD,
        # and the --prefix option is to turn absolute paths into relative paths,
        # not to find files in subdirectories.
        #
        # Also, trying to run the code coverage tool inside docker was more trouble than it's worth.
        #
        # Need to move coverage files to frontend, because filenames are relative to frontend root
        run: |
          sudo chmod 755 ./browser_test && sudo mv ./browser_test/coverage ./frontend
          cd ./frontend && ../cc-test-reporter format-coverage -t lcov
          ./cc-test-reporter upload-coverage
      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v1
        with:
          username: cfranklin11
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push updated images
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          docker push cfranklin11/tipresias_frontend:latest
          docker push cfranklin11/tipresias_browser_test:latest
